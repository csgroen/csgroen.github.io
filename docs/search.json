[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m passionate about using molecular data to find biological insights that can lead to more treatment options for patients.\nI also love using and implementing well thought-out and documented methods to do my research, and I started this blog to share some code to help myself and others to carry out more reproducible research."
  },
  {
    "objectID": "posts/dockerize_my_analysis/index.html",
    "href": "posts/dockerize_my_analysis/index.html",
    "title": "Dockerizing my R environment for reproducibility",
    "section": "",
    "text": "I love working in R because they make data analysis incredibly convenient. But guarding my analyses against package updates has always been a mixed bag. We’re looking at you, DiffBind.\nI’ve known about docker for a while, but I always considered it the nuclear option for reproducibility: effective, but complicated and possibly a time-destroyer.\nSo I decided to give renv a try. It worked well locally during development, but the problem revealed itself when I tried sharing my analysis with my lab mates to test its “reproducibility status”. It was a complex analysis that loaded many packages and their complex dependency trees. It took forever to get up and running in their computers, and required them to Linux libraries making the whole process more than I’d bargained for.\nSo I thought: “fine, I’ll try docker”. And I think I figured out the magic formula: docker + renv + R scripts = beautiful reproducibility baby."
  },
  {
    "objectID": "posts/dockerize_my_analysis/index.html#docker-renv",
    "href": "posts/dockerize_my_analysis/index.html#docker-renv",
    "title": "Dockerizing my R environment for reproducibility",
    "section": "Docker + renv",
    "text": "Docker + renv\nFor this to work, you’ll need to install docker and renv:\n\ninstall.packages(\"renv\")\n\nOf course, this works better with Rstudio, but should work regardless. We’ll make a simple analysis here so that this post itself is reproducible.\nFirst, I’ll create a new directory for my project. In the example, we’ll call it, creatively, “example”.\n\nMinimal reproducible script example\nFirst, a note:\n\nOf course for a project of the complexity of this example, all you’d need is an .Rmd (or .qmd 😉) knit into an html. But analyses can get quite complex, and everything I wrote here I have tested in a much more complex real life example I used to organize my code for publication.\n\nNow, let’s create a little analysis:\n\ndir.create(\"example\")\n\nWarning in dir.create(\"example\"): 'example' already exists\n\n\nInside this folder, we’ll add all our analysis scripts. In this case, there will be only one: “sleepytime.R”.\nLet’s make a fun animal plot: how long to mammals sleep?\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.6     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\ndata(\"msleep\")\nmsleep2 <- msleep %>%\n    select(name, vore, sleep_total) %>%\n    filter(!is.na(vore))\n\n\nsleepiest <- top_n(msleep2, 5, sleep_total) %>% .[c(1,3,5),]\nleast_sleepy <- top_n(msleep2, -3, sleep_total)\nmiddle <- msleep2 %>% filter(name %in% c(\"Dog\", \"Human\", \"Macaque\"))\n\nannots <- bind_rows(sleepiest, least_sleepy, middle)\n\n\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\nggplot(msleep2, aes(vore, fill = vore, sleep_total)) +\n    geom_violin(alpha = 0.5) +\n    geom_quasirandom(size = 1) +\n    geom_text_repel(aes(label = name), size = 3, data = annots, hjust = 0, vjust = 1) +\n    stat_summary(fun = median, geom = \"crossbar\", width = 0.6, size = 0.2) +\n    labs(x = \"Feeding behavior (vore)\", y = \"Total sleep per night (hours)\") +\n    guides(fill = \"none\") +\n    theme_light()\n\n\n\n\nWe’ll add the results of this very complex analysis to a script (sleep.R), and then activate and freeze our environment.\n\nrenv::activate()\n# run script\nrenv::snapshot() # this might take a while\n\nYou’ll then have the file you need, the renv.lock that has all the packages needed. You can download the project files from Github.\n\n\nCreating our docker\nNow we need to create our docker file. There’s a lot more information about it here and a cheat sheet on docker here. But here’s how I think is easiest to do for R reproducible analyses.\nMy R docker philosophy is that we keep code and data separate from our environment. The docker will only contain the environment to reproduce the analysis. The code and data will be mounted into the docker when it is run. This means you can still modify the code once the docker image has been built and don’t need to build it again every time, as long as you didn’t add any new dependencies in the new code. This will greatly simplify our lives, while still ensuring full reproducibility of results.\nThat being said, time to assemble the Dockerfile and build our image.\nFor all R projects, look no further than the Rocker project for all your base image needs. What is the best version will depend on this project, but my general direction is: if you use tidyverse anywhere, use the tidyverse image. Otherwise, use the rstudio image to have a GUI into your environment.\nNow, make sure you take a rocker image with the same R version as you. Then, let’s do our Dockerfile:\n\nFROM rocker/tidyverse:4.2.0\n# your renv version\nENV RENV_VERSION=0.15.4\nRUN apt-get update\n# install any Unix libraries after this, e.g. RUN apt-get update && apt-get install cmake\nRUN R \"install.packages('remotes', repos = repos = c(CRAN = 'https://cloud.r-project.org')\"\nRUN R \"remotes::install_github('rstudio/renv@${RENV_VERSION}')\"\nWORKDIR /project\nCOPY renv.lock renv.lock\nRUN R \"renv::restore()\"\n\nWrite this to a file called Dockerfile in the directory where your analysis is (you’ll see it included if you downloaded the project).\nNow navigate to the directory in the terminal and build it (this will take a while):\n\ndocker build -t csgroen/blog_example .\n\nMake sure you give it a relevant name under the -t (tag) flag. Here, I used my username on DockerHub and a name relevant to this post, i.e. username/image_name, so I can push this later to share.\nAnd that’s it, your environment is dockerized!\nIf you’d like to download the one I just made instead of building it, just pull it from Docker Hub:\n\ndocker pull csgroen/blog_example\n\n\n\nRunning the docker\nBefore we share it with the world, let’s re-run your analysis.\n\ndocker run --rm \\\n-v path/to/example:/home/rstudio/project \\\n-p 8787:8787 \\\n-e PASSWORD=somepassword \\\n-e USERID=$UID \\\ncsgroen/blog_example\n\nHere, we are mounting the “example” directory into the “project” directory of our image and preparing the password and username so we can use Rstudio server to connect to the image.\nMake sure you use the absolute path/to/example, e.g. /home/myuser/Downloads/example.\nOnce you run this, you’ll see this message, or something very similar:\n\n[s6-init] making user provided files available at /var/run/s6/etc...exited 0.\n[s6-init] ensuring user provided files have correct perms...exited 0.\n[fix-attrs.d] applying ownership & permissions fixes...\n[fix-attrs.d] done.\n[cont-init.d] executing container initialization scripts...\n[cont-init.d] 01_set_env: executing... \nskipping /var/run/s6/container_environment/HOME\nskipping /var/run/s6/container_environment/PASSWORD\nskipping /var/run/s6/container_environment/RSTUDIO_VERSION\n[cont-init.d] 01_set_env: exited 0.\n[cont-init.d] 02_userconf: executing... \ndeleting the default user\ncreating new rstudio with UID 1001\nuseradd: warning: the home directory /home/rstudio already exists.\nuseradd: Not copying any file from skel directory into it.\n[cont-init.d] 02_userconf: exited 0.\n[cont-init.d] done.\n[services.d] starting services\n[services.d] done.\n\nThis means Rstudio server is ready with your environment and your mounted data. Open your browser to localhost:8787. You’ll see this:\n\nSign-in with the credentials we created on docker run:\n\nUsername: rstudio\nPassword: somepassword\n\nYou’ll be signed into something like this:\n\nSee our project folder in the Files. Navigate there and you’ll see our sleep.R script. Open it and run it.\n\nAnd we’re done: we’ve been able to run the same analysis in the same environment we had when we wrote it.\n\n\nSharing\nNow that everything works, we can push our docker, and add the example (with the code and data) to Github. In this minimal example, we don’t have any additional data other than the script, but you could add that as well.\nCheck these instructions.) to push to Docker Hub.\nAnd then add your code/data to a repo on Github, like I did here.\nMake a README like this to teach others how to reproduce the analysis:\n\n# Minimal example of reproducible analysis\n\nTo run the analysis contained in `sleep.R` in the same environment it was created:\n\n1.  Pull the docker image from DockerHub:\n\ndocker pull csgroen/blog_example\n\n2.  Download this repo (e.g. git clone csgroen/blog_example)\n\n3.  Mount the repo into the docker image and run:\n\ndocker run --rm\\\n-v /path/to/example:/home/rstudio/project\\\n-p 8787:8787\\\n-e PASSWORD=somepassword\\\n-e USERID=\\$UID\\\ncsgroen/blog_example\n\nwhere /path/to/example is the absolute path to the repo.\n\n3.  Open Rstudio server by opening your browser and navigating to:\n\nlocalhost:8787\n\n4.  Sign-in username: rstudio password: somepassword.\n\n5.  Navigate to `/project`, open the `sleep.R` script and run it.\n\nNow celebrate achieving the gold standard of reproducibility, something very few are even attempting to do.\n\n\n\n\n\nFeel free to open issues and hit me up on Github if you have any problems/questions! Toodaloo 👋🏻"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog | Clarice S Groeneveld",
    "section": "",
    "text": "r\n\n\ntutorial\n\n\ndocker\n\n\n\n\nAre you tired of package updates changing your outputs? This one is for you\n\n\n\n\n\n\nMay 2, 2022\n\n\nClarice S Groeneveld\n\n\n\n\n\n\nNo matching items"
  }
]